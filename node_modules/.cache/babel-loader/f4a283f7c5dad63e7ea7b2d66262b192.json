{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Workspace/api-proofs/api-proofs/src/components/EventbriteInfo.jsx\";\nimport React, { Component } from 'react'; //Ebrite token.. we should store this elsewhere\n\nconst token = \"PUEDRFSKYLE6Z5YEBRVN\";\nvar ticketmasterEventArray = [];\nvar eventbriteEventArray = [];\nvar ticketmaster_query_1 = \"https://app.ticketmaster.com/discovery/v2/events.json?classificationName=music&dmaId=343&apikey=W1pcXuKqQdPy3aAzokBdFdcfQYOtx8Zb\";\nvar eventbrite_query_1 = \"https://www.eventbriteapi.com/v3/events/search/?sort_by=date&location.latitude=36.162663&location.longitude=-86.781601&token=\".concat(token, \"&expand=venue\");\nexport class EventbriteInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ticketmasterEventList: [],\n      eventbriteEventList: []\n    };\n\n    this.getTicketmasterConcertInfo = () => {\n      fetch(ticketmaster_query_1).then(results => results.json()).then(allConcerts => {\n        allConcerts._embedded.events.forEach(concert => {\n          console.log(\"Ticketmaster Concert\", concert);\n          let INPUT_OBJ = {\n            category: \"\",\n            name: \"\",\n            venue: \"\",\n            startDate: \"\",\n            address: \"\",\n            description: \"\",\n            price: \"\"\n          };\n          INPUT_OBJ.name = concert.name;\n          INPUT_OBJ.category = concert.classifications[0].segment.name;\n          INPUT_OBJ.startDate = concert.dates.start.dateTime;\n          INPUT_OBJ.location = concert._embedded.venues[0].name;\n          INPUT_OBJ.address = concert._embedded.venues[0].address.line1 + ', ' + concert._embedded.venues[0].city.name + ' ' + concert._embedded.venues[0].country.countryCode;\n          INPUT_OBJ.description = concert.classifications[0].genre.name; // INPUT_OBJ.price = concert.priceRange[0].min.toString() \n          // + ' - ' + concert.priceRange[0].max.toString()\n          // + ' - ' + concert.priceRange[0].currency\n\n          ticketmasterEventArray.push(INPUT_OBJ); // console.log(INPUT_OBJ)\n        });\n\n        this.setState({\n          ticketmasterEventList: ticketmasterEventArray\n        });\n      });\n    };\n\n    this.getEventbriteConcertInfo = () => {\n      fetch(eventbrite_query_1).then(response => response.json()).then(data => {\n        // console.log(\"Data\", data) //testing\n        data.events.forEach(event_item => {\n          // console.log(event_item) //testing\n          const eventDate = this.date_convert(event_item.start.local); //Define Object that will be passed to DOM builder\n\n          let INPUT_OBJ = {\n            type: \"\",\n            name: \"\",\n            location: \"\",\n            details: \"\"\n          };\n          INPUT_OBJ.type = \"Events\";\n          INPUT_OBJ.name = event_item.name.text;\n          INPUT_OBJ.location = event_item.venue.address.address_1;\n\n          if (INPUT_OBJ.location === null) {\n            INPUT_OBJ.location = \"To Be Announced\";\n          }\n\n          INPUT_OBJ.details = eventDate; //converted above, using date_convert\n\n          eventbriteEventArray.push(INPUT_OBJ);\n        });\n        this.setState({\n          eventbriteEventList: eventbriteEventArray\n        });\n      });\n    };\n  }\n\n  date_convert(dateString) {\n    //Ex. input \"2019-04-24T19:00:00\"\n    //console.log(dateString)\n    let yr = dateString.substring(0, 4);\n    let mo = dateString.substring(5, 7);\n    let da = dateString.substring(8, 10);\n    return \"\".concat(mo, \"-\").concat(da, \"-\").concat(yr);\n  }\n\n  componentDidMount() {\n    this.getTicketmasterConcertInfo(); // this.getEventbriteConcertInfo();\n  }\n\n  render() {\n    //Testing\n    // console.log(\"Event List in State :\", this.state.eventbriteEventList)\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.ticketmasterEventList.map((event, i) => {\n      return React.createElement(\"ul\", {\n        key: i,\n        style: {\n          backgroundColor: \"dodgerblue\",\n          margin: \"3em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        key: event.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \" NAME : \", event.name), React.createElement(\"p\", {\n        key: event.location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \" VENUE : \", event.location), React.createElement(\"p\", {\n        key: event.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \" TYPE : \", event.type), React.createElement(\"p\", {\n        key: event.description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \" DESCRIPTION : \", event.description), React.createElement(\"p\", {\n        key: event.startDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \" Start DateTime : \", event.startDate), React.createElement(\"p\", {\n        key: event.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \" ADDRESS : \", event.address));\n    })));\n  }\n\n}\nexport default EventbriteInfo;","map":{"version":3,"sources":["/Users/jason/Workspace/api-proofs/api-proofs/src/components/EventbriteInfo.jsx"],"names":["React","Component","token","ticketmasterEventArray","eventbriteEventArray","ticketmaster_query_1","eventbrite_query_1","EventbriteInfo","state","ticketmasterEventList","eventbriteEventList","getTicketmasterConcertInfo","fetch","then","results","json","allConcerts","_embedded","events","forEach","concert","console","log","INPUT_OBJ","category","name","venue","startDate","address","description","price","classifications","segment","dates","start","dateTime","location","venues","line1","city","country","countryCode","genre","push","setState","getEventbriteConcertInfo","response","data","event_item","eventDate","date_convert","local","type","details","text","address_1","dateString","yr","substring","mo","da","componentDidMount","render","map","event","i","backgroundColor","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n//Ebrite token.. we should store this elsewhere\nconst token = \"PUEDRFSKYLE6Z5YEBRVN\";\n\nvar ticketmasterEventArray = []\nvar eventbriteEventArray = []\nvar ticketmaster_query_1 = \"https://app.ticketmaster.com/discovery/v2/events.json?classificationName=music&dmaId=343&apikey=W1pcXuKqQdPy3aAzokBdFdcfQYOtx8Zb\";\n\nvar eventbrite_query_1 = `https://www.eventbriteapi.com/v3/events/search/?sort_by=date&location.latitude=36.162663&location.longitude=-86.781601&token=${token}&expand=venue`\n\nexport class EventbriteInfo extends Component {\n\n    state = {\n        ticketmasterEventList: [],\n        eventbriteEventList: []\n    };\n\n    getTicketmasterConcertInfo = () => {\n        fetch(ticketmaster_query_1)\n            .then(results => results.json())\n            .then(allConcerts => {\n                allConcerts._embedded.events.forEach(concert => {\n                    console.log(\"Ticketmaster Concert\",concert)\n\n                    let INPUT_OBJ = {\n                        category: \"\",\n                        name: \"\",\n                        venue: \"\",\n                        startDate: \"\",\n                        address: \"\",\n                        description: \"\",\n                        price: \"\",\n\n\n                    }\n                    INPUT_OBJ.name = concert.name;\n                    INPUT_OBJ.category = concert.classifications[0].segment.name;\n                    INPUT_OBJ.startDate = concert.dates.start.dateTime;\n                    INPUT_OBJ.location = concert._embedded.venues[0].name;\n                    INPUT_OBJ.address = concert._embedded.venues[0].address.line1 \n                    + ', ' + concert._embedded.venues[0].city.name \n                    + ' ' + concert._embedded.venues[0].country.countryCode;\n                    INPUT_OBJ.description = concert.classifications[0].genre.name;\n                    // INPUT_OBJ.price = concert.priceRange[0].min.toString() \n                    // + ' - ' + concert.priceRange[0].max.toString()\n                    // + ' - ' + concert.priceRange[0].currency\n\n                    ticketmasterEventArray.push(INPUT_OBJ)\n                    // console.log(INPUT_OBJ)\n                })\n                this.setState({ ticketmasterEventList: ticketmasterEventArray })\n            })\n    }\n\n    getEventbriteConcertInfo = () => {\n        fetch(eventbrite_query_1)\n            .then(response => response.json())\n            .then(data => {\n                // console.log(\"Data\", data) //testing\n                data.events.forEach(event_item => {\n\n                    // console.log(event_item) //testing\n\n                    const eventDate = this.date_convert(event_item.start.local)\n                    //Define Object that will be passed to DOM builder\n                    let INPUT_OBJ = {\n                        type: \"\",\n                        name: \"\",\n                        location: \"\",\n                        details: \"\"\n                    }\n                    INPUT_OBJ.type = \"Events\"\n                    INPUT_OBJ.name = event_item.name.text;\n                    INPUT_OBJ.location = event_item.venue.address.address_1;\n                    if (INPUT_OBJ.location === null) {\n                        INPUT_OBJ.location = \"To Be Announced\"\n                    }\n                    INPUT_OBJ.details = eventDate; //converted above, using date_convert\n\n                    eventbriteEventArray.push(INPUT_OBJ)\n                })\n                this.setState({ eventbriteEventList: eventbriteEventArray })\n            })\n    }\n    date_convert(dateString) {\n        //Ex. input \"2019-04-24T19:00:00\"\n        //console.log(dateString)\n        let yr = dateString.substring(0, 4)\n        let mo = dateString.substring(5, 7)\n        let da = dateString.substring(8, 10)\n        return (`${mo}-${da}-${yr}`)\n    }\n\n\n    componentDidMount() {\n        this.getTicketmasterConcertInfo();\n        // this.getEventbriteConcertInfo();\n\n    }\n\n    render() {\n        //Testing\n        // console.log(\"Event List in State :\", this.state.eventbriteEventList)\n        return (\n            <>\n            <div >\n                {this.state.ticketmasterEventList.map((event, i) => {\n                    return (\n                        <ul key={i} style={{backgroundColor:\"dodgerblue\", margin:\"3em\"}}>\n                            <h4 key={event.name}> NAME : {event.name}</h4>\n                            <p key={event.location}> VENUE : {event.location}</p>\n                            <p key={event.type}> TYPE : {event.type}</p>\n                            <p key={event.description}> DESCRIPTION : {event.description}</p>\n                            <p key={event.startDate}> Start DateTime : {event.startDate}</p>\n                            <p key={event.address}> ADDRESS : {event.address}</p>\n                        </ul>\n                    )\n                })}\n            </div>\n            {/* <div >\n                {this.state.eventbriteEventList.map((event, i) => {\n                    return (\n                        <ul key={i} style={{backgroundColor:\"peachpuff\", margin:\"3em\"}}>\n                            <h4 key={event.name}> NAME : {event.name}</h4>\n                            <p key={event.location}> LOCATION : {event.location}</p>\n                            <p key={event.type}> TYPE : {event.type}</p>\n                            <p key={event.details}> DETAILS : {event.details}</p>\n                        </ul>\n                    )\n                })}\n            </div> */}\n            </>\n        );\n    }\n}\n\nexport default EventbriteInfo;\n"]},"metadata":{},"sourceType":"module"}