{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Workspace/api-proofs/api-proofs/src/components/EventbriteInfo.jsx\";\nimport React, { Component } from 'react'; //Ebrite token.. we should store this elsewhere\n\nconst token = \"WKCHBZHI5XOXOL4XX7MR\";\nvar ticketmasterEventArray = [];\nvar eventbriteEventArray = [];\nvar ticketmaster_query_1 = \"https://app.ticketmaster.com/discovery/v2/events.json?classificationName=music&dmaId=343&apikey=W1pcXuKqQdPy3aAzokBdFdcfQYOtx8Zb\";\nvar eventbrite_query_1 = \"https://www.eventbriteapi.com/v3/events/search/?sort_by=date&location.latitude=36.162663&location.longitude=-86.781601&token=\".concat(token, \"&expand=venue\");\nexport class EventbriteInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ticketmasterEventList: []\n    };\n\n    this.getTicketmasterConcertInfo = () => {\n      fetch(ticketmaster_query_1).then(results => results.json()).then(allConcerts => {\n        allConcerts._embedded.events.forEach(concert => {\n          // console.log(concert)\n          let INPUT_OBJ = {\n            type: \"\",\n            name: \"\",\n            location: \"\",\n            details: \"\"\n          };\n          INPUT_OBJ.type = \"Concerts\";\n          INPUT_OBJ.name = concert.name;\n          INPUT_OBJ.location = concert._embedded.venues[0].name;\n          INPUT_OBJ.details = concert.classifications[0].genre.name;\n          ticketmasterEventArray.push(INPUT_OBJ);\n        });\n\n        this.setState({\n          ticketmasterEventList: ticketmasterEventArray\n        });\n      }); // console.log(INPUT_OBJ)\n    };\n\n    this.getEventbriteConcertInfo = () => {\n      fetch(eventbrite_query_1).then(response => response.json()).then(data => {\n        data.events.forEach(event_item => {\n          //console.log(event_item) //testing\n          // const eventDate = date_convert(event_item.start.local)\n          //Define Object that will be passed to DOM builder\n          INPUT_OBJ = {\n            type: \"\",\n            name: \"\",\n            location: \"\",\n            details: \"\"\n          };\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getTicketmasterConcertInfo();\n  }\n\n  render() {\n    // console.log(\"Event List in State :\", this.state.eventList)\n    return React.createElement(React.Fragment, null, this.state.eventList.map((event, i) => {\n      return React.createElement(\"ul\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        key: event.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, event.name), React.createElement(\"p\", {\n        key: event.location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, event.location), React.createElement(\"p\", {\n        key: event.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, event.type), React.createElement(\"p\", {\n        key: event.details,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, event.details));\n    }));\n  }\n\n}\nexport default EventbriteInfo;","map":{"version":3,"sources":["/Users/jason/Workspace/api-proofs/api-proofs/src/components/EventbriteInfo.jsx"],"names":["React","Component","token","ticketmasterEventArray","eventbriteEventArray","ticketmaster_query_1","eventbrite_query_1","EventbriteInfo","state","ticketmasterEventList","getTicketmasterConcertInfo","fetch","then","results","json","allConcerts","_embedded","events","forEach","concert","INPUT_OBJ","type","name","location","details","venues","classifications","genre","push","setState","getEventbriteConcertInfo","response","data","event_item","componentDidMount","render","eventList","map","event","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n//Ebrite token.. we should store this elsewhere\nconst token = \"WKCHBZHI5XOXOL4XX7MR\";\n\nvar ticketmasterEventArray = []\nvar eventbriteEventArray = []\nvar ticketmaster_query_1 = \"https://app.ticketmaster.com/discovery/v2/events.json?classificationName=music&dmaId=343&apikey=W1pcXuKqQdPy3aAzokBdFdcfQYOtx8Zb\";\n\nvar eventbrite_query_1 = `https://www.eventbriteapi.com/v3/events/search/?sort_by=date&location.latitude=36.162663&location.longitude=-86.781601&token=${token}&expand=venue`\n\nexport class EventbriteInfo extends Component {\n\n    state = {\n        ticketmasterEventList: []\n    };\n\n\n    getTicketmasterConcertInfo = () => {\n        fetch(ticketmaster_query_1)\n            .then(results => results.json())\n            .then(allConcerts => {\n                allConcerts._embedded.events.forEach(concert => {\n                    // console.log(concert)\n\n\n                    let INPUT_OBJ = {\n                        type: \"\",\n                        name: \"\",\n                        location: \"\",\n                        details: \"\"\n                    }\n                    INPUT_OBJ.type = \"Concerts\";\n                    INPUT_OBJ.name = concert.name;\n                    INPUT_OBJ.location = concert._embedded.venues[0].name;\n                    INPUT_OBJ.details = concert.classifications[0].genre.name;\n\n                    ticketmasterEventArray.push(INPUT_OBJ)\n                })\n                this.setState({ ticketmasterEventList: ticketmasterEventArray })\n            })\n        // console.log(INPUT_OBJ)\n    }\n\n    getEventbriteConcertInfo = () => {\n        fetch(eventbrite_query_1)\n            .then(response => response.json())\n            .then(data => {\n                data.events.forEach(event_item => {\n\n                        //console.log(event_item) //testing\n                        // const eventDate = date_convert(event_item.start.local)\n                        //Define Object that will be passed to DOM builder\n                        INPUT_OBJ = {\n                            type: \"\",\n                            name: \"\",\n                            location: \"\",\n                            details: \"\"\n                        }\n                })\n            })\n    }\n\n\n    componentDidMount() {\n        this.getTicketmasterConcertInfo();\n    }\n\n    render() {\n        // console.log(\"Event List in State :\", this.state.eventList)\n\n        return (\n\n            <>\n                {this.state.eventList.map((event, i) => {\n                    return (\n                        <ul key={i}>\n                            <h4 key={event.name}>{event.name}</h4>\n                            <p key={event.location}>{event.location}</p>\n                            <p key={event.type}>{event.type}</p>\n                            <p key={event.details}>{event.details}</p>\n                        </ul>\n                    )\n                })}\n            </>\n        );\n    }\n}\n\nexport default EventbriteInfo;\n"]},"metadata":{},"sourceType":"module"}